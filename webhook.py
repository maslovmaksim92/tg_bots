import os
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from fastapi import APIRouter, Request
from loguru import logger

from handler import router as main_router
from form import router as form_router

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
WEBHOOK_PATH = "/webhook/agent"
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
TOKEN = os.getenv("AGENT_BOT_TOKEN")

if not TOKEN:
    raise EnvironmentError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è AGENT_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
if not WEBHOOK_URL:
    raise EnvironmentError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω–∞")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)



dp = Dispatcher(storage=MemoryStorage())
dp.include_router(main_router)
dp.include_router(form_router)

# === FastAPI router –¥–ª—è webhook ===
api_router = APIRouter()

@api_router.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    try:
        payload = await request.json()
        update = types.Update.model_validate(payload)
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram: {payload.get('message', {}).get('text', '–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞')}")
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return {"ok": False, "error": str(e)}

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
@dp.startup()
async def on_startup():
    try:
        webhook_url = WEBHOOK_URL + WEBHOOK_PATH
        await bot.set_webhook(url=webhook_url, drop_pending_updates=True)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {e}")
