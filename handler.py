import os
import random
from pathlib import Path

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    FSInputFile,
    InputMediaPhoto,
)
from aiogram.types.update import Update
from fastapi import FastAPI, Request
from loguru import logger

from prompts import get_answer

# === ENV ===
AGENT_BOT_TOKEN = os.getenv("AGENT_BOT_TOKEN")
TG_CHAT_LEAD = os.getenv("TG_CHAT_LEAD")
BASE_WEBHOOK = os.getenv("WEBHOOK_URL")

if not AGENT_BOT_TOKEN:
    raise EnvironmentError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è AGENT_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
if not TG_CHAT_LEAD:
    raise EnvironmentError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TG_CHAT_LEAD –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
if not BASE_WEBHOOK:
    raise EnvironmentError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = BASE_WEBHOOK + WEBHOOK_PATH

# === Bot / Dispatcher ===
bot = Bot(token=AGENT_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
router = Router()
dp = Dispatcher()
dp.include_router(router)

# === FastAPI ===
app = FastAPI()

# === UI ===
def get_main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üìÅ –ü–æ–ª—É—á–∏—Ç—å –ö–ü")],
            [KeyboardButton(text="üì∑ –§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞")],
            [KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        ]
    )

user_states: dict[int, dict] = {}

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@router.message(F.text.lower() == "/start")
async def start_handler(msg: Message) -> None:
    logger.info(f"‚ñ∂Ô∏è /start –æ—Ç {msg.from_user.id}")
    await msg.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø ‚Äî Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –ö–∞–ª—É–≥–µ.\n\n"
        "üè¢ *–û–±—ä–µ–∫—Ç*: –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞ (1089 –º¬≤), –ø–µ—Ä–µ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥ –£–§–ò–¶\n"
        "üìç *–ê–¥—Ä–µ—Å*: –ö–∞–ª—É–≥–∞, –ø–µ—Ä. –°–µ–ª—å—Å–∫–∏–π, 8–∞\n"
        "üí∞ *–¶–µ–Ω–∞*: 56 –º–ª–Ω ‚ÇΩ *(–≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ—Ä–≥)*\n"
        "üìà *–î–æ—Ö–æ–¥*: –∞—Ä–µ–Ω–¥–∞ –æ—Ç –û–û–û ¬´–í–∞—à –î–æ–º¬ª / –£–§–ò–¶ (–§–°–ò–ù)\n"
        "üóìÔ∏è *–°—Ä–æ–∫*: –∞—Ä–µ–Ω–¥–∞ 10 –ª–µ—Ç, triple-net\n"
        "üèõÔ∏è *–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫*: –û–û–û ¬´–í–∞—à –î–æ–º¬ª\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "üìë –ü–æ–ª—É—á–∏—Ç—å –ö–ü\n"
        "üì∑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ\n"
        "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É\n\n"
        "üì© –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî —è –æ—Ç–≤–µ—á—É!",
        reply_markup=get_main_keyboard()
    )

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ===
@router.message(F.text == "üìÅ –ü–æ–ª—É—á–∏—Ç—å –ö–ü")
async def send_presentation(msg: Message) -> None:
    try:
        logger.info(f"üìë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ö–ü")
        docs = sorted(Path("agent_bot/templates").glob("*.pdf"))
        doc_titles = {
            "Presentation GAB Kaluga.pdf": "üìä –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "egrn.pdf": "üìÑ –í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù",
            "resume.pdf": "üìã –†–µ–∑—é–º–µ –æ–±—ä–µ–∫—Ç–∞",
            "svod_pravil_308.pdf": "üìò –°–≤–æ–¥ –ø—Ä–∞–≤–∏–ª",
            "tex_plan.pdf": "üìê –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω",
            "otchet.pdf": "üìä –û—Ç—á–µ—Ç –æ —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
        }

        if not docs:
            await msg.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        await msg.answer("üìé –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç—É:")
        for doc in docs:
            caption = doc_titles.get(doc.name, f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {doc.name}")
            await msg.answer_document(FSInputFile(doc), caption=caption)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ö–ü")
        await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –§–æ—Ç–æ ===
@router.message(F.text == "üì∑ –§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞")
async def send_photos(msg: Message) -> None:
    try:
        logger.info(f"üì∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–æ—Ç–æ")
        folder = "agent_bot/images"
        if not os.path.exists(folder):
            await msg.answer("‚ùå –ü–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        photos = [
            InputMediaPhoto(FSInputFile(os.path.join(folder, fname)))
            for fname in sorted(os.listdir(folder))
            if fname.lower().endswith((".jpg", ".jpeg", ".png"))
        ]

        if not photos:
            await msg.answer("üìÇ –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        for i in range(0, len(photos), 10):
            await msg.answer_media_group(photos[i:i + 10])

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ")
        await msg.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ.")

# === –ó–∞—è–≤–∫–∞ ===
@router.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_application(msg: Message) -> None:
    logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –Ω–∞—á–∞–ª –∑–∞—è–≤–∫—É")
    user_states[msg.from_user.id] = {"step": "name"}
    await msg.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–§–ò–û*:")

@router.message(F.text)
async def process_form_or_question(msg: Message) -> None:
    user_id = msg.from_user.id
    state = user_states.get(user_id)

    if state:
        if state["step"] == "name":
            name = msg.text.strip()
            if not name:
                await msg.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
                return
            state["name"] = name
            state["step"] = "phone"
            await msg.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*:")
            return

        elif state["step"] == "phone":
            phone = msg.text.strip()
            if not phone or not phone.replace(" ", "").replace("-", "").isdigit():
                await msg.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
                return
            state["phone"] = phone

            text = (
                f"üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\n"
                f"üë§ –§–ò–û: {state['name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {state['phone']}\n"
                f"üÜî Telegram ID: {user_id}\n"
                f"üë§ Username: @{msg.from_user.username or '–Ω–µ—Ç'}"
            )

            try:
                await bot.send_message(chat_id=TG_CHAT_LEAD, text=text)
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏")

            await msg.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
            user_states.pop(user_id, None)
            return

    # === GPT-–≤–æ–ø—Ä–æ—Å ===
    if msg.text:
        try:
            logger.info(f"üß† –í–æ–ø—Ä–æ—Å –æ—Ç {user_id}: {msg.text}")
            answer = await get_answer(msg.text, user_id=user_id)
            await msg.answer(answer)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ GPT")
            await msg.answer("ü§ñ –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await msg.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")

# === Webhook ===
@app.post(WEBHOOK_PATH)
async def telegram_webhook(req: Request):
    try:
        data = await req.json()
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
        return {"status": "ok"}
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ webhook –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        return {"status": "error", "detail": str(e)}

@app.on_event("startup")
async def on_startup():
    try:
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception as e:
        logger.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")

@app.on_event("shutdown")
async def on_shutdown():
    try:
        await bot.delete_webhook()
        logger.info("üõë Webhook —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook")
