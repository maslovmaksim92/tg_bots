### handler.py
import os
from aiogram import Router, F, Bot
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InputMediaPhoto
)
from loguru import logger
from pathlib import Path
from prompts import get_answer

AGENT_BOT_TOKEN = os.getenv("AGENT_BOT_TOKEN")
TG_CHAT_LEAD = os.getenv("TG_CHAT_LEAD")

if not AGENT_BOT_TOKEN:
    raise EnvironmentError("‚ùå AGENT_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
if not TG_CHAT_LEAD:
    raise EnvironmentError("‚ùå TG_CHAT_LEAD –Ω–µ –∑–∞–¥–∞–Ω")

bot = Bot(token=AGENT_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
router = Router()

user_states = {}

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üìÅ –ü–æ–ª—É—á–∏—Ç—å –ö–ü")],
            [KeyboardButton(text="üì∑ –§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞")],
            [KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        ]
    )

@router.message(F.text.lower() == "/start")
async def start_handler(msg: Message):
    logger.info(f"‚ñ∂Ô∏è /start –æ—Ç {msg.from_user.id}")
    await msg.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø ‚Äî Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.\n\n"
        "üìë –ü–æ–ª—É—á–∏—Ç—å –ö–ü\nüì∑ –§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞\nüìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É\n\n"
        "üì© –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî —è –æ—Ç–≤–µ—á—É!",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üìÅ –ü–æ–ª—É—á–∏—Ç—å –ö–ü")
async def send_presentation(msg: Message):
    folder = "templates"
    try:
        files = sorted(Path(folder).glob("*.pdf"))
        if not files:
            await msg.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        await msg.answer("üìé –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
        for doc in files:
            await msg.answer_document(FSInputFile(doc))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ö–ü: {e}")
        await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.")

@router.message(F.text == "üì∑ –§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞")
async def send_photos(msg: Message):
    folder = "images"
    try:
        if not os.path.exists(folder):
            await msg.answer("‚ùå –ü–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        media = [InputMediaPhoto(FSInputFile(os.path.join(folder, f))) for f in os.listdir(folder)
                 if f.lower().endswith((".jpg", ".jpeg", ".png"))]
        if not media:
            await msg.answer("üìÇ –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        for i in range(0, len(media), 10):
            await msg.answer_media_group(media[i:i+10])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ.")

@router.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_form(msg: Message):
    user_states[msg.from_user.id] = {"step": "name"}
    await msg.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

@router.message(F.text)
async def handle_message(msg: Message):
    user_id = msg.from_user.id
    state = user_states.get(user_id)

    if state:
        if state["step"] == "name":
            state["name"] = msg.text.strip()
            state["step"] = "phone"
            await msg.answer("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            return
        elif state["step"] == "phone":
            phone = msg.text.strip()
            state["phone"] = phone
            await bot.send_message(TG_CHAT_LEAD, f"üì• –ó–∞—è–≤–∫–∞\n–§–ò–û: {state['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
            user_states.pop(user_id)
            await msg.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
            return

    # GPT-–æ—Ç–≤–µ—Ç
    try:
        answer = await get_answer(msg.text, user_id=user_id)
        await msg.answer(answer)
    except Exception as e:
        logger.error(f"GPT error: {e}")
        await msg.answer("ü§ñ –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å.")
