import os
import random
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    FSInputFile,
    InputMediaPhoto
)
from fastapi import FastAPI, Request
from aiogram.types.update import Update
from agent_bot.prompts import get_answer
from loguru import logger
from pathlib import Path

# === Telegram Bot Setup ===

bot = Bot(
    token=os.getenv("AGENT_BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)

router = Router()
dp = Dispatcher()
dp.include_router(router)

# === Webhook FastAPI App ===

app = FastAPI()

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = os.getenv("WEBHOOK_URL") + WEBHOOK_PATH
TG_CHAT_LEAD = os.getenv("TG_CHAT_LEAD")

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üìÅ –ü–æ–ª—É—á–∏—Ç—å –ö–ü")],
            [KeyboardButton(text="üì∑ –§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞")],
            [KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        ]
    )

user_states = {}

@router.message(F.text.lower() == "/start")
async def start_handler(msg: Message):
    logger.info(f"‚ñ∂Ô∏è /start –æ—Ç {msg.from_user.id}")
    await msg.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø ‚Äî Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –ö–∞–ª—É–≥–µ.\n\n"
        "üè¢ *–û–±—ä–µ–∫—Ç*: –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞ (1089 –º¬≤) —Å —É—á–∞—Å—Ç–∫–æ–º (815 –º¬≤), –ø–µ—Ä–µ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥ –∂–µ–Ω—Å–∫–∏–π –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä ‚Äî –£–§–ò–¶\n"
        "üìç *–ê–¥—Ä–µ—Å*: –ö–∞–ª—É–≥–∞, –ø–µ—Ä. –°–µ–ª—å—Å–∫–∏–π, 8–∞\n"
        "üí∞ *–¶–µ–Ω–∞*: 56 –º–ª–Ω ‚ÇΩ *(—Ç–æ—Ä–≥ –≤–æ–∑–º–æ–∂–µ–Ω –ø—Ä–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏)*\n"
        "üìà *–î–æ—Ö–æ–¥*: –∞—Ä–µ–Ω–¥–∞ –æ—Ç –û–û–û ¬´–í–∞—à –î–æ–º¬ª —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –æ–±—ä–µ–∫—Ç–∞ –≤ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –§–°–ò–ù (–£–§–ò–¶)\n"
        "üóìÔ∏è *–°—Ä–æ–∫*: –∞—Ä–µ–Ω–¥–∞ –Ω–∞ 10 –ª–µ—Ç, triple-net (–≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–µ)\n"
        "üõ°Ô∏è *–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å*: –æ–±—ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7, –ø–µ—Ä—Å–æ–Ω–∞–ª –Ω–∞ –º–µ—Å—Ç–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –°–ü 308.13330.2012\n"
        "üèõÔ∏è *–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫*: –û–û–û ¬´–í–∞—à –î–æ–º¬ª\n\n"
        "ü§ù *–ú—ã –æ—Ç–∫—Ä—ã—Ç—ã –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É —Å –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º–∏*.\n"
        "–ü–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–π —Ñ–æ—Ä–º–µ ‚Äî —è –æ—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ä–∞—Å—Å–∫–∞–∂—É –æ–± —É—Å–ª–æ–≤–∏—è—Ö –∏ —Å—Ä–∞–∑—É –≤—ã—à–ª—é –Ω—É–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Äî üìë –ü–æ–ª—É—á–∏—Ç—å –ö–ü\n"
        "‚Äî üì∑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ\n"
        "‚Äî üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É\n\n"
        "üì© –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üìë –ü–æ–ª—É—á–∏—Ç—å –ö–ü")
async def send_presentation(msg: Message):
    logger.info(f"üìë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ö–ü")
    docs = sorted(Path("agent_bot/templates").glob("*.pdf"))
    doc_titles = {
        "Presentation GAB Kaluga.pdf": "üìä –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
        "egrn.pdf": "üìÑ –í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù",
        "resume.pdf": "üìã –†–µ–∑—é–º–µ –æ–±—ä–µ–∫—Ç–∞",
        "svod_pravil_308.pdf": "üìò –°–≤–æ–¥ –ø—Ä–∞–≤–∏–ª",
        "tex_plan.pdf": "üìê –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω",
        "otchet.pdf": "üìä –û—Ç—á–µ—Ç –æ —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
    }
    if not docs:
        await msg.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    await msg.answer("üìé –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –æ–±—ä–µ–∫—Ç—É:")
    for doc in docs:
        name = doc.name
        caption = doc_titles.get(name, f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {name}")
        await msg.answer_document(FSInputFile(doc), caption=caption)

@router.message(F.text == "üì∑ –§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞")
async def send_photos(msg: Message):
    logger.info(f"üì∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–æ—Ç–æ")
    folder = "agent_bot/images"
    if not os.path.exists(folder):
        await msg.answer("‚ùå –ü–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    photos = []
    for fname in sorted(os.listdir(folder)):
        if fname.lower().endswith((".jpg", ".jpeg", ".png")):
            file_path = os.path.join(folder, fname)
            photos.append(InputMediaPhoto(media=FSInputFile(file_path)))
    if not photos:
        await msg.answer("üìÇ –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    for i in range(0, len(photos), 10):
        await msg.answer_media_group(photos[i:i+10])

@router.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_application(msg: Message):
    logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –Ω–∞—á–∞–ª –∑–∞—è–≤–∫—É")
    user_states[msg.from_user.id] = {"step": "name"}
    await msg.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–§–ò–û*:")

@router.message(F.text)
async def process_form_or_question(msg: Message):
    user_id = msg.from_user.id
    if user_id in user_states:
        state = user_states[user_id]
        if state["step"] == "name":
            state["name"] = msg.text.strip()
            state["step"] = "phone"
            await msg.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*:")
            return
        elif state["step"] == "phone":
            state["phone"] = msg.text.strip()
            state["step"] = "done"
            text = (
                f"üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\n"
                f"üë§ –§–ò–û: {state['name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {state['phone']}\n"
                f"üÜî Telegram ID: {user_id}\n"
                f"üë§ Username: @{msg.from_user.username or '–Ω–µ—Ç'}"
            )
            await bot.send_message(chat_id=TG_CHAT_LEAD, text=text)
            await msg.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
            user_states.pop(user_id, None)
            return
    if not msg.text:
        await msg.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return
    logger.info(f"üß† –í–æ–ø—Ä–æ—Å –æ—Ç {msg.from_user.id}: {msg.text}")
    answer = await get_answer(msg.text, user_id=user_id)
    await msg.answer(answer)

@app.post(WEBHOOK_PATH)
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"status": "ok"}

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    logger.info("üõë Webhook —É–¥–∞–ª—ë–Ω")
