import os
from aiogram import Router, F, Bot, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from loguru import logger

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
AGENT_BOT_TOKEN = os.getenv("AGENT_BOT_TOKEN")
TG_CHAT_LEAD = os.getenv("TG_CHAT_LEAD")

if not AGENT_BOT_TOKEN:
    raise EnvironmentError("‚ùå AGENT_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

if not TG_CHAT_LEAD:
    raise EnvironmentError("‚ùå TG_CHAT_LEAD –Ω–µ –∑–∞–¥–∞–Ω")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
router = Router()
bot = Bot(
    token=AGENT_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)
ADMIN_CHAT_ID = int(TG_CHAT_LEAD)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã ===
class Form(StatesGroup):
    name = State()
    phone = State()
    comment = State()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

@router.message(F.text == "üì¨ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_form(msg: Message, state: FSMContext):
    logger.info(f"üìù –°—Ç–∞—Ä—Ç —Ñ–æ—Ä–º—ã –æ—Ç {msg.from_user.id}")
    await msg.answer("‚úçÔ∏è –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)

@router.message(Form.name)
async def form_name(msg: Message, state: FSMContext):
    name = msg.text.strip()
    if not name:
        await msg.answer("‚ö†Ô∏è –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(name=name)
    await msg.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.phone)

@router.message(Form.phone)
async def form_phone(msg: Message, state: FSMContext):
    phone = msg.text.strip()
    if not phone or not phone.replace(" ", "").replace("-", "").isdigit():
        await msg.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    await state.update_data(phone=phone)
    await msg.answer("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –≤–æ–ø—Ä–æ—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª")
    await state.set_state(Form.comment)

@router.message(Form.comment)
async def form_comment(msg: Message, state: FSMContext):
    await state.update_data(comment=msg.text.strip())
    data = await state.get_data()

    text = (
        f"üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞*\n\n"
        f"üë§ –ò–º—è: {data.get('name')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment')}\n"
        f"üÜî Telegram: [{msg.from_user.full_name}](tg://user?id={msg.from_user.id})"
    )

    try:
        await bot.send_message(ADMIN_CHAT_ID, text)
        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç {msg.from_user.id}")
        await msg.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()
