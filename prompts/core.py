import os
import re
import random
from datetime import datetime
from openai import AsyncOpenAI
from prompts.data import *

client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def contains(text: str, patterns: list[str]) -> bool:
    return any(re.search(re.escape(p), text) for p in patterns)

def detect_persona(text: str) -> str:
    if contains(text, ["—è –∞–≥–µ–Ω—Ç", "—É –º–µ–Ω—è –∫–ª–∏–µ–Ω—Ç", "–±—Ä–æ–∫–µ—Ä", "—Ä–∞–±–æ—Ç–∞—é —Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–º"]):
        return "agent"
    if contains(text, ["—Ö–æ—á—É –≤–ª–æ–∂–∏—Ç—å", "–∏—â—É –¥–ª—è —Å–µ–±—è", "–ø–æ–∫—É–ø–∞—é", "—Å–º–æ—Ç—Ä—é –¥–ª—è —Å–µ–±—è"]):
        return "investor"
    return "neutral"

async def get_answer(question: str, user_id: int = None) -> str:
    q = question.lower()
    persona = detect_persona(q)

    # üîç –ü–æ–∏—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if persona == "agent":
        for keyword, reply in FAQ_AGENT.items():
            if keyword in q:
                return reply
    elif persona == "investor":
        for keyword, reply in FAQ_INVESTOR.items():
            if keyword in q:
                return reply

    if contains(q, ["–ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä—é", "–Ω–µ –∑–Ω–∞—é", "–ø–æ–∫–∞ –Ω–µ—Ç", "–∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å"]):
        return "üßê –£—Ç–æ—á–Ω–∏—Ç–µ, –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–∑—É—á–∞–µ—Ç–µ —Ä—ã–Ω–æ–∫?"

    style_prompt = STYLE_PROMPT_AGENT if persona == "agent" else STYLE_PROMPT_INVESTOR
    cta = random.choice(CTA_AGENT if persona == "agent" else CTA_INVESTOR)
    followup = random.choice(FOLLOWUP_AGENT if persona == "agent" else FOLLOWUP_INVESTOR)

    file_hint = ""
    for keyword, hint in FILE_HINTS.items():
        if keyword in q:
            file_hint = f"\nüìé {hint}"
            break

    messages = [
        {"role": "system", "content": style_prompt},
        {"role": "user", "content": question}
    ]

    try:
        if user_id:
            with open("logs/questions.log", "a", encoding="utf-8") as f:
                f.write(f"[{datetime.now()}] {user_id}: {question}\n")
    except:
        pass

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=messages
        )
        return response.choices[0].message.content.strip() + f"\n\n{cta}{file_hint}\n\n{followup}"
    except Exception:
        return "üìç –û–±—ä–µ–∫—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç. –î–æ–∫—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã. –£—Ç–æ—á–Ω–∏—Ç–µ, –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞?"
