import random
from datetime import datetime
from openai import AsyncOpenAI
import os

from prompts.data import (
    FAQ_AGENT,
    FAQ_INVESTOR,
    FILE_HINTS,
    CTA_AGENT,
    CTA_INVESTOR,
    FOLLOWUP_AGENT,
    FOLLOWUP_INVESTOR,
    STYLE_PROMPT_AGENT,
    STYLE_PROMPT_INVESTOR
)

client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

AGENT_CUES = ["—è –∞–≥–µ–Ω—Ç", "—É –º–µ–Ω—è –∫–ª–∏–µ–Ω—Ç", "—Ä–∞–±–æ—Ç–∞—é —Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–º", "–±—Ä–æ–∫–µ—Ä"]
INVESTOR_CUES = ["–∏—â—É –¥–ª—è —Å–µ–±—è", "—Ö–æ—á—É –≤–ª–æ–∂–∏—Ç—å", "—Å–º–æ—Ç—Ä—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏"]
BAD_PATTERNS = ["–ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä—é", "–Ω–µ –∑–Ω–∞—é", "–ø–æ–∫–∞ –Ω–µ—Ç", "–∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å"]

SUMMARY = (
    "üìç *–ö–∞–ª—É–≥–∞, –ø–µ—Ä. –°–µ–ª—å—Å–∫–∏–π, 8–∞*\n"
    "üè¢ *–û–±—ä–µ–∫—Ç*: –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞, –ø–µ—Ä–µ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥ –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä (–£–§–ò–¶)\n"
    "üìê *–ü–ª–æ—â–∞–¥—å*: 1089,7 –º¬≤ + 815 –º¬≤ –∑–µ–º–ª–∏\n"
    "üìÑ *–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä*: –û–û–û \"–í–∞—à –î–æ–º\"\n"
    "üë• *–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª*: –∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –§–°–ò–ù –≤ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n"
    "üìä *–û—Ü–µ–Ω–∫–∞, —Ç–µ—Ö–ø–ª–∞–Ω, –°–ü 308*: –≤ –Ω–∞–ª–∏—á–∏–∏\n"
    "üí∞ *–¶–µ–Ω–∞*: 56 –º–ª–Ω ‚ÇΩ (–æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è)\n"
    "üîê –û–±—Ä–µ–º–µ–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–≥–∞—à–µ–Ω–æ –¥–æ —Å–¥–µ–ª–∫–∏"
)

def detect_persona(text: str) -> str:
    text = text.lower()
    if any(cue in text for cue in AGENT_CUES):
        return "agent"
    if any(cue in text for cue in INVESTOR_CUES):
        return "investor"
    return "neutral"

async def get_answer(question: str, user_id: int = None) -> str:
    q_lower = question.lower()

    for keyword, answer in {**FAQ_AGENT, **FAQ_INVESTOR}.items():
        if keyword in q_lower:
            return answer

    if any(p in q_lower for p in BAD_PATTERNS):
        return "üßê –£—Ç–æ—á–Ω–∏—Ç–µ, –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å?"

    persona = detect_persona(q_lower)

    if persona == "agent":
        style_prompt = STYLE_PROMPT_AGENT
        cta = random.choice(CTA_AGENT)
        followup = random.choice(FOLLOWUP_AGENT)
    elif persona == "investor":
        style_prompt = STYLE_PROMPT_INVESTOR
        cta = random.choice(CTA_INVESTOR)
        followup = random.choice(FOLLOWUP_INVESTOR)
    else:
        style_prompt = STYLE_PROMPT_AGENT + " " + STYLE_PROMPT_INVESTOR
        cta = random.choice(CTA_AGENT + CTA_INVESTOR)
        followup = random.choice(FOLLOWUP_AGENT + FOLLOWUP_INVESTOR)

    file_hint = ""
    for keyword, hint in FILE_HINTS.items():
        if keyword in q_lower:
            file_hint = f"\n{hint}"
            break

    prompt = f"""
{SUMMARY}

{style_prompt}

–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: "{question}"

–û—Ç–≤–µ—Ç:
1. ‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞
2. üìé {cta}{file_hint}
3. ‚ùì {followup}
"""

    if user_id:
        try:
            with open("logs/questions.log", "a", encoding="utf-8") as f:
                f.write(f"[{datetime.now()}] {user_id}: {question}\n")
        except Exception:
            pass

    try:
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception:
        return "üìç –î–æ–∫—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã. –£—Ç–æ—á–Ω–∏—Ç–µ, –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –ª–∏—á–Ω–æ?"
